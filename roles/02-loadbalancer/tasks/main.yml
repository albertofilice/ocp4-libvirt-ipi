---
# tasks file for 02-loadbalancer

- include_vars: "{{ ocp_install_file_path }}"

- name: Install Haproxy
  become: true
  module_defaults:
    shell:
      chdir: "{{ kvm_workdir }}"
  block:
    - name: Install Load Balancer
      become: true
      block:
        - name: Install needed packages
          yum:
            name:
              - haproxy
              - python3-netaddr
            state: present

        - name: Get Firewalld ZONE
          shell: "IFADDR=$(nmcli con show '{{ kvm_interface }}' | grep ipv4.addresses | awk -F ':                         ' '{print $2}' | awk -F / '{print $1}') ; echo $IFADDR"
          register: publicaddress

        - name: Remove the haproxy.conf if it's the default one
          shell: "if grep 'Example configuration for a possible web application' /etc/haproxy/haproxy.cfg  ; then     rm -f /etc/haproxy/haproxy.cfg ; fi"

        - stat:
            path: /etc/haproxy/haproxy.cfg
          register: haproxy_file

        - name: Write out haproxy config file header
          when: not haproxy_file.stat.exists
          blockinfile:
            path: /etc/haproxy/haproxy.cfg
            create: yes
            insertbefore: BOF
            block: |
              global
                  log         127.0.0.1 local2
                  chroot      /var/lib/haproxy
                  pidfile     /var/run/haproxy.pid
                  maxconn     4000
                  user        haproxy
                  group       haproxy
                  daemon
                  stats socket /var/lib/haproxy/stats
              defaults
                  mode                    http
                  log                     global
                  option                  httplog
                  option                  dontlognull
                  option http-server-close
                  option forwardfor       except 127.0.0.0/8
                  option                  redispatch
                  retries                 3
                  timeout http-request    10s
                  timeout queue           1m
                  timeout connect         10s
                  timeout client          1m
                  timeout server          1m
                  timeout http-keep-alive 10s
                  timeout check           10s
                  maxconn                 3000
              listen stats
                  bind :9000
                  mode http
                  stats enable
                  stats uri /
                  monitor-uri /healthz
              frontend openshift-api-server
                  bind *:6443
                  default_backend default-openshift-api-server
                  tcp-request inspect-delay 5s
                  tcp-request content accept if { req_ssl_hello_type 1 }
                  mode tcp
                  option tcplog
              frontend ingress-http
                  bind *:80
                  default_backend default-ingress-http
                  mode tcp
                  option tcplog
              frontend ingress-https
                  bind *:443
                  default_backend default-ingress-securehttps
                  tcp-request inspect-delay 5s
                  tcp-request content accept if { req_ssl_hello_type 1 }
                  mode tcp
                  option tcplog
              backend default-openshift-api-server
                  balance source
                  mode tcp
              backend default-ingress-http
                  balance source
                  mode tcp
              backend default-ingress-securehttps
                  balance source
                  mode tcp
        - name: Create ACL in HAproxy frontend API
          ansible.builtin.lineinfile:
            path: /etc/haproxy/haproxy.cfg
            insertafter: '    default_backend default-openshift-api-server'
            line: "    use_backend {{ cluster_name }}-openshift-api-server if { req.ssl_sni -m sub {{ cluster_name }}.{{ basedomain }} }"


        - name: Create ACL in HAproxy frontend HTTPS
          ansible.builtin.lineinfile:
            path: /etc/haproxy/haproxy.cfg
            insertafter: '    default_backend default-ingress-securehttps'
            line: "    use_backend {{ cluster_name }}-ingress-https if { req.ssl_sni -m sub {{ cluster_name }}.{{ basedomain }} }"


        - name: Create ACL in HAproxy frontend HTTP
          ansible.builtin.lineinfile:
            path: /etc/haproxy/haproxy.cfg
            insertafter: '    default_backend default-ingress-http'
            line: "    use_backend {{ cluster_name }}-ingress-http if { hdr_end(host) -i .{{ cluster_name }}.{{ basedomain }} }"

        - name: Create backends haproxy file
          template:
            src: haproxy.cfg.back.j2
            dest: "{{ playbook_dir }}/haproxy.cfg.back.tmp"

        - name: Remove HAPROXY backends config for this cluster
          blockinfile:
            path: /etc/haproxy/haproxy.cfg
            marker: "######## {{ cluster_name }} {mark} ########"
            state: absent

        - name: Create haproxy file
          shell: |
            cat {{ playbook_dir }}/haproxy.cfg.back.tmp >> /etc/haproxy/haproxy.cfg

        - name: Remove temp file for haproxy config
          file:
            path: "{{ playbook_dir }}/haproxy.cfg.back.tmp"
            state: absent

        - name: SEBool allow haproxy connect any port
          ignore_errors: yes
          shell: "setsebool -P haproxy_connect_any 1"

        - name: Starting services
          service:
            name: "{{ item }}"
            enabled: yes
            state: restarted
          with_items:
            - haproxy
